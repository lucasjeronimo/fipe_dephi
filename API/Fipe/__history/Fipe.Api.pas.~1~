unit TabelaFipe.Api;

interface

uses
   Foundation.Fluent.REST.Client, System.JSON, System.SysUtils, REST.Json.Types,REST.Types,
   TabelaFipe.Model.Interfaces,
   TabelaFipe.Model.Referencia, TabelaFipe.Model.Marca, TabelaFipe.Model.Modelo, TabelaFipe.Model.AnoModelo, TabelaFipe.Model.Veiculo;

type
   TTipoVeiculoFipe = (tvfCarros = 1, tvfMotos = 2, tvfCaminhoes = 3);
   TTipoVeiculo = (tvCarros = 1, tvMotos = 0, tvCaminhoes = 2);

   TTabelaFipe = class(TInterfacedObject, ITabelaFipe)
   private
      FTipoVeiculo : Integer;
   public
      constructor create(ATipoVeiculo:Integer);
      class function New(ATipoVeiculo:Integer): ITabelaFipe;
      function getReferencias:TResult<TReferencias>;
      function getMarcas(AReferencia:Integer;ATentativas:Integer=1):TResult<TMarcas>;
      function getModelos(AReferencia,AMarca:Integer;ATentativas:Integer=1):TResult<TModelos>;
      function getAnosModelos(AReferencia,AMarca,AModelo:Integer;ATentativas:Integer=1):TResult<TAnosModelos>;
      function getVeiculo(AReferencia,AMarca,AModelo:Integer;AAnoModelo:String;ATentativas:Integer=1):TResult<TVeiculo>;
   end;

   const
      END_POINT = 'http://veiculos.fipe.org.br/api/veiculos/';

implementation

{ TTabelaFipe }

constructor TTabelaFipe.create(ATipoVeiculo: Integer);
begin
   FTipoVeiculo := ATipoVeiculo;
end;

class function TTabelaFipe.New(ATipoVeiculo: Integer): ITabelaFipe;
begin
   Result := Create(ATipoVeiculo);
end;

function TTabelaFipe.getReferencias: TResult<TReferencias>;
var
   request : TRestClientRequest;
   Referencias : TReferencias;
   mString : String;
begin
   try
      request := RestBuilder.CreateRequest
                             .Resource(END_POINT)
                             .ResourceParams(['ConsultarTabelaDeReferencia'])
                             .Post;

      if (not request.RequestError) and (request.ResponseStatusCode = 200) then
      begin
         Referencias := TReferencias.Create;
         Result.success := true;
         mString := request.ResponseContent;
         Referencias.AsJson := mString;
         Result.result := Referencias;
      end
      else
      begin
         Result.message := request.RequestErrorMessage;
         Result.success := false;
         Result.result  := TReferencias.Create;
      end;
   except
      on E: ERESTException do
      begin
         Result.message := E.Message;
         Result.success := false;
         Result.result  := TReferencias.Create;
         Exit;
      end;
   end;
end;

function TTabelaFipe.getMarcas(AReferencia:Integer;ATentativas:Integer=1): TResult<TMarcas>;
var
   request : TRestClientRequest;
   mBody : String;
   Marcas : TMarcas;

   function getBody:String;
   var
      jSonObject : TJsonObject;
   begin
      Result      := '';
      jSonObject := TJsonObject.Create;
      try
         jSonObject.AddPair('codigoTabelaReferencia',IntToStr(AReferencia));
         jSonObject.AddPair('codigoTipoVeiculo',IntToStr(FTipoVeiculo));
         Result := jSonObject.ToJson;
      finally
         jSonObject.Free;
      end;
   end;
begin
   mBody := getBody;
   try
      request := RestBuilder.CreateRequest
                             .Resource(END_POINT)
                             .ResourceParams(['ConsultarMarcas'])
                             .Body(mBody, TRESTContentType.ctAPPLICATION_JSON)
                             .Post;

      if (not request.RequestError) and (request.ResponseStatusCode = 200) then
      begin
         Marcas := TMarcas.Create;
         Result.success := true;
         Marcas.AsJson := request.ResponseContent;
         Result.result := Marcas;
      end
      else
      begin
         Result.message := request.RequestErrorMessage;
         Result.success := false;
         Result.result  := TMarcas.Create;
      end;
   except
      on E: ERESTException do
      begin
         if ATentativas <= 3 then
         begin
            inc(ATentativas);
            Result := getMarcas(AReferencia,ATentativas);
            Exit;
         end;
         Result.message := E.Message;
         Result.success := false;
         Result.result  := TMarcas.Create;
         Exit;
      end;
   end;
end;

function TTabelaFipe.getModelos(AReferencia, AMarca: Integer;ATentativas:Integer=1): TResult<TModelos>;
var
   request : TRestClientRequest;
   mBody : String;
   Modelos : TModelos;

   function getBody:String;
   var
      jSonObject : TJsonObject;
   begin
      Result      := '';
      jSonObject := TJsonObject.Create;
      try
         jSonObject.AddPair('codigoTabelaReferencia',IntToStr(AReferencia));
         jSonObject.AddPair('codigoTipoVeiculo',IntToStr(FTipoVeiculo));
         jSonObject.AddPair('codigoMarca',IntToStr(AMarca));
         Result := jSonObject.ToJson;
      finally
         jSonObject.Free;
      end;
   end;
begin
   mBody := getBody;
   try
      request := RestBuilder.CreateRequest
                             .Resource(END_POINT)
                             .ResourceParams(['ConsultarModelos'])
                             .Body(mBody, TRESTContentType.ctAPPLICATION_JSON)
                             .Post;

      if (not request.RequestError) and (request.ResponseStatusCode = 200) then
      begin
         Modelos := TModelos.Create;
         Result.success := true;
         Modelos.AsJson := request.ResponseContent;
         Result.result := Modelos;
      end
      else
      begin
         Result.message := request.RequestErrorMessage;
         Result.success := false;
         Result.result  := TModelos.Create;
      end;
   except
      on E: ERESTException do
      begin
         if ATentativas <= 3 then
         begin
            inc(ATentativas);
            Result := getModelos(AReferencia,AMarca,ATentativas);
            Exit;
         end;
         Result.message := E.Message;
         Result.success := false;
         Result.result  := TModelos.Create;
         Exit;
      end;
   end;
end;

function TTabelaFipe.getAnosModelos(AReferencia, AMarca, AModelo: Integer;ATentativas:Integer=1): TResult<TAnosModelos>;
var
   request : TRestClientRequest;
   mBody : String;
   AnosModelos : TAnosModelos;

   function getBody:String;
   var
      jSonObject : TJsonObject;
   begin
      Result      := '';
      jSonObject := TJsonObject.Create;
      try
         jSonObject.AddPair('codigoTabelaReferencia',IntToStr(AReferencia));
         jSonObject.AddPair('codigoTipoVeiculo',IntToStr(FTipoVeiculo));
         jSonObject.AddPair('codigoMarca',IntToStr(AMarca));
         jSonObject.AddPair('codigoModelo',IntToStr(AModelo));
         Result := jSonObject.ToJson;
      finally
         jSonObject.Free;
      end;
   end;
begin
   mBody := getBody;
   try
      request := RestBuilder.CreateRequest
                             .Resource(END_POINT)
                             .ResourceParams(['ConsultarAnoModelo'])
                             .Body(mBody, TRESTContentType.ctAPPLICATION_JSON)
                             .Post;

      if (not request.RequestError) and (request.ResponseStatusCode = 200) then
      begin
         AnosModelos := TAnosModelos.Create;
         Result.success := true;
         AnosModelos.AsJson := request.ResponseContent;
         Result.result := AnosModelos;
      end
      else
      begin
         Result.message := request.RequestErrorMessage;
         Result.success := false;
         Result.result  := TAnosModelos.Create;
      end;
   except
      on E: ERESTException do
      begin
         if ATentativas <= 3 then
         begin
            inc(ATentativas);
            Result := getAnosModelos(AReferencia, AMarca, AModelo ,ATentativas);
            Exit;
         end;
         Result.message := E.Message;
         Result.success := false;
         Result.result  := TAnosModelos.Create;
         Exit;
      end;
   end;
end;

function TTabelaFipe.getVeiculo(AReferencia, AMarca, AModelo: Integer; AAnoModelo: String; ATentativas:Integer=1): TResult<TVeiculo>;
var
   request : TRestClientRequest;
   mBody : String;
   Veiculo : TVeiculo;

   (*
   {
	"codigoTabelaReferencia" : {{ _.referencia }},
	"codigoMarca" : {{ _.nissan }},
	"codigoModelo" : {{ _.kicks }},
	"codigoTipoVeiculo" : 1,
	"anoModelo" : 2018,
	"codigoTipoCombustivel" : "1",
  "codigoTipoVeiculo": 1,
	"modeloCodigoExterno" : "",
	"tipoConsulta" : "tradicional"
}
   *)

   function getBody:String;
   var
      jSonObject : TJsonObject;
      mCombustivel : String;
   begin
      Result       := '';
      mCombustivel := AAnoModelo.Substring(AAnoModelo.Length-1);
      AAnoModelo   := AAnoModelo.Substring(0,AAnoModelo.Length-2);
      jSonObject := TJsonObject.Create;
      try
         jSonObject.AddPair('codigoTabelaReferencia',IntToStr(AReferencia));
         jSonObject.AddPair('codigoTipoVeiculo',IntToStr(FTipoVeiculo));
         jSonObject.AddPair('codigoMarca',IntToStr(AMarca));
         jSonObject.AddPair('codigoModelo',IntToStr(AModelo));
         jSonObject.AddPair('anoModelo',AAnoModelo);
         jSonObject.AddPair('codigoTipoCombustivel',mCombustivel);
         jSonObject.AddPair('tipoConsulta','tradicional');
         Result := jSonObject.ToJson;
      finally
         jSonObject.Free;
      end;
   end;
begin
   mBody := getBody;
   try
      request := RestBuilder.CreateRequest
                             .Resource(END_POINT)
                             .ResourceParams(['ConsultarValorComTodosParametros'])
                             .Body(mBody, TRESTContentType.ctAPPLICATION_JSON)
                             .Post;

      if (not request.RequestError) and (request.ResponseStatusCode = 200) then
      begin
         Veiculo := TVeiculo.Create;
         Result.success := true;
         Veiculo.AsJson := request.ResponseContent;
         Result.result := Veiculo;
      end
      else
      begin
         Result.message := request.RequestErrorMessage;
         Result.success := false;
         Result.result  := TVeiculo.Create;
      end;
   except
      on E: ERESTException do
      begin
         if ATentativas <= 3 then
         begin
            inc(ATentativas);
            Result := getVeiculo(AReferencia, AMarca, AModelo, AAnoModelo ,ATentativas);
            Exit;
         end;
         Result.message := E.Message;
         Result.success := false;
         Result.result  := TVeiculo.Create;
         Exit;
      end;
   end;
end;

end.
